(* Program *)
<program> ::= { <statement> }
<block> ::= "{" { <statement> } "}"
<statement> ::= Î» | <declaration> | <assignment> | <print> | <if_statement> | <while_loop> | <function_declaration> | <function_call> | <return> ";"

(* Variable management *):
<identifier> ::= <letter> { <letter> | <digit> | "_" }
<declaration> ::= "baptize" <type> "as" <identifier> 
<assignment> ::= (<declaration> | <identifier>) "giveth" <relExpression> 
<print> ::= "proclaim" "(" <relExpression> ")" 

(* Loops *)
<while_loop> ::= "prayAsLongAs" "(" <relExpression> ")"  <block> 

(* If *)
<if_statement> ::= "testify" "(" <relExpression> ")" <block> [ "otherwise" < block> ]

(* Functions *)
<function_declaration> ::= "preach" <type> "as" <identifier> "(" [ <parameters> ] ")" <block>
<parameters> ::= <parameter> { "," <parameter> }
<parameter> ::= <type> "as" <identifier>
<function_call> ::= <identifier> "(" [ <arguments> ] ")" 
<arguments> ::= <relExpression> { "," <relExpression> }
<return> ::= "amen" <expression> ";"

# Expressions:
<relExpression> = <expression>, { ("==" | ">" | "<" | ">=" | "<="), <expression> } 
<expression> = <term>, { ("+" | "-" | "||"), <term> } 
<term> = <factor>, { ("*" | "/" | "&&"), <factor> } 
<factor> = (("+" | "-" | "!"), <factor>) | <int> | "(", <relExpression>, ")" | <identifier> 


# Types:
<type>  ::= "int" | "string"
<int> ::= <digit>, {<digit>}
<string> ::= '"' { <any_character> } '"'
<any_character> ::= <letter> | <digit> | <symbol>
<letter> ::= ("A" | "B" | ... | "Z" | "a" | "b" | ... | "z") 
<digit> ::= ( 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 ) 
<symbol> ::= "+" | "-" | "*" | "/" | "%" | "(" | ")" | "{" | "}" | "[" | "]" | "," | "." | ";" | ":" | "!" | "?" | "="